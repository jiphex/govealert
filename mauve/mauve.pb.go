// Code generated by protoc-gen-go.
// source: mauve/mauve.proto
// DO NOT EDIT!

package mauve

import proto "github.com/jiphex/govealert/Godeps/_workspace/src/code.google.com/p/goprotobuf/proto"
import json "encoding/json"
import math "math"

// Reference proto, json, and math imports to suppress error if they are not otherwise used.
var _ = proto.Marshal
var _ = &json.SyntaxError{}
var _ = math.Inf

// An alert is a notification of an event in your business, project or
// enterprise for which someone might want to stop what they're doing and
// attend to.
//
// Alerts
//
type Alert struct {
	// Every separate alert must have a unique Id attached.  When sending a
	// repeated or altered alert, using the same alert id will overwrite
	// the previous settings.
	//
	Id *string `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	// The UNIX time at which this alert was or will be raised.  If set to zero it
	// means 'this alert is assumed to be raised already'.
	//
	RaiseTime *uint64 `protobuf:"varint,2,opt,name=raise_time" json:"raise_time,omitempty"`
	// The UNIX time at which this alert was or will be cleared.  If set to zero
	// it means 'do not clear automatically'.  Messages with clear times set before
	// alert times are not valid, and will be ignored.
	//
	ClearTime *uint64 `protobuf:"varint,3,opt,name=clear_time" json:"clear_time,omitempty"`
	// The subject is the name of the server/device/entity that is being alerted
	// about.  If not supplied, assumed to be the same as source.
	//
	Subject *string `protobuf:"bytes,4,opt,name=subject" json:"subject,omitempty"`
	// The summary is a summary of an alert (100 characters or less) that
	// can be fitted into a pager or SMS message, along with the source & subject.
	//
	Summary *string `protobuf:"bytes,5,opt,name=summary" json:"summary,omitempty"`
	// The detail can be an arbitrary HTML fragment for display on suitable
	// devices giving fuller information about the alert.
	//
	Detail *string `protobuf:"bytes,6,opt,name=detail" json:"detail,omitempty"`
	// The importance of this alert (relative to others from this source).  Zero
	// is 'unspecified importance' which will use the server's default.
	//
	Importance *uint32 `protobuf:"varint,7,opt,name=importance" json:"importance,omitempty"`
	// Suppress any notifications about this alert until this UNIX time.
	//
	SuppressUntil    *uint64 `protobuf:"varint,8,opt,name=suppress_until" json:"suppress_until,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Alert) Reset()         { *m = Alert{} }
func (m *Alert) String() string { return proto.CompactTextString(m) }
func (*Alert) ProtoMessage()    {}

func (m *Alert) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *Alert) GetRaiseTime() uint64 {
	if m != nil && m.RaiseTime != nil {
		return *m.RaiseTime
	}
	return 0
}

func (m *Alert) GetClearTime() uint64 {
	if m != nil && m.ClearTime != nil {
		return *m.ClearTime
	}
	return 0
}

func (m *Alert) GetSubject() string {
	if m != nil && m.Subject != nil {
		return *m.Subject
	}
	return ""
}

func (m *Alert) GetSummary() string {
	if m != nil && m.Summary != nil {
		return *m.Summary
	}
	return ""
}

func (m *Alert) GetDetail() string {
	if m != nil && m.Detail != nil {
		return *m.Detail
	}
	return ""
}

func (m *Alert) GetImportance() uint32 {
	if m != nil && m.Importance != nil {
		return *m.Importance
	}
	return 0
}

func (m *Alert) GetSuppressUntil() uint64 {
	if m != nil && m.SuppressUntil != nil {
		return *m.SuppressUntil
	}
	return 0
}

// The AlertUpdate is the unit of communication from an alerting source;
// it consists of one or more alerts, which can either replace, or supplement
// the alert data for that source.
//
type AlertUpdate struct {
	// Random number with each transmission, so that destinations can easily
	// identify and discard duplicate transmissions that are inherent to the
	// protocol.
	//
	TransmissionId *uint64 `protobuf:"varint,1,req,name=transmission_id" json:"transmission_id,omitempty"`
	// The source of an alert represents the sender - each possible sender
	// should set this consistently (e.g. the name of the monitoring system
	// that is generating a particular class of alerts).
	//
	Source *string `protobuf:"bytes,2,req,name=source" json:"source,omitempty"`
	// When set to true,  signals that this update should completely replace
	// all current data for this source (so unlisted previous alerts are deemed
	// to be cleared).
	//
	Replace *bool `protobuf:"varint,3,req,name=replace,def=0" json:"replace,omitempty"`
	// Alert data follows
	//
	Alert []*Alert `protobuf:"bytes,4,rep,name=alert" json:"alert,omitempty"`
	// Signature to authenticate this data - no scheme defined currently, maybe
	// SHA1(alert.raw + password) ?
	//
	Signature []byte `protobuf:"bytes,5,opt,name=signature" json:"signature,omitempty"`
	// The UNIX time at which the packet was sent by the server.
	//
	TransmissionTime *uint64 `protobuf:"varint,8,opt,name=transmission_time" json:"transmission_time,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *AlertUpdate) Reset()         { *m = AlertUpdate{} }
func (m *AlertUpdate) String() string { return proto.CompactTextString(m) }
func (*AlertUpdate) ProtoMessage()    {}

const Default_AlertUpdate_Replace bool = false

func (m *AlertUpdate) GetTransmissionId() uint64 {
	if m != nil && m.TransmissionId != nil {
		return *m.TransmissionId
	}
	return 0
}

func (m *AlertUpdate) GetSource() string {
	if m != nil && m.Source != nil {
		return *m.Source
	}
	return ""
}

func (m *AlertUpdate) GetReplace() bool {
	if m != nil && m.Replace != nil {
		return *m.Replace
	}
	return Default_AlertUpdate_Replace
}

func (m *AlertUpdate) GetAlert() []*Alert {
	if m != nil {
		return m.Alert
	}
	return nil
}

func (m *AlertUpdate) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *AlertUpdate) GetTransmissionTime() uint64 {
	if m != nil && m.TransmissionTime != nil {
		return *m.TransmissionTime
	}
	return 0
}

func init() {
}
